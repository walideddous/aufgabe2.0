// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test the customHooks of the /components/index.tsx Should match snapShot with the main component => component/index 1`] = `
<MockedProvider
  addTypename={false}
  mocks={
    Array [
      Object {
        "data": Object {
          "PTStopItems": Array [
            Object {
              "data": Object {
                "_id": "5f6203cc0d5658001cd8fae8",
                "key": "100713",
                "keyMapping": Object {
                  "diva": Object {
                    "ojp": "713",
                  },
                  "gi": "1400015",
                },
                "loc": Object {
                  "coord": null,
                  "name": "Gaillard",
                  "omc": "24074133",
                  "placeId": "1",
                },
                "modes": Array [
                  "4",
                ],
                "name": "Gaillard, Libération",
                "routes": Array [
                  "ojp91017_Hj20",
                  "ojp91017_Rj20",
                ],
              },
              "geojson": Object {
                "geometry": Object {
                  "coordinates": Array [
                    6.21145,
                    46.19161,
                  ],
                  "type": "Point",
                },
                "type": "Feature",
              },
              "key": "100713",
              "name": "Gaillard, Libération",
              "type": "stop",
            },
          ],
        },
        "request": Object {
          "query": Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": Object {
                  "kind": "Name",
                  "value": "PTStopItems",
                },
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [
                        Object {
                          "kind": "Argument",
                          "name": Object {
                            "kind": "Name",
                            "value": "modes",
                          },
                          "value": Object {
                            "kind": "Variable",
                            "name": Object {
                              "kind": "Name",
                              "value": "modes",
                            },
                          },
                        },
                      ],
                      "directives": Array [],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "PTStopItems",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "type",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "name",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "key",
                            },
                            "selectionSet": undefined,
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "geojson",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "type",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "geometry",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "type",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "coordinates",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "data",
                            },
                            "selectionSet": undefined,
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [
                  Object {
                    "defaultValue": undefined,
                    "directives": Array [],
                    "kind": "VariableDefinition",
                    "type": Object {
                      "kind": "NonNullType",
                      "type": Object {
                        "kind": "ListType",
                        "type": Object {
                          "kind": "NamedType",
                          "name": Object {
                            "kind": "Name",
                            "value": "String",
                          },
                        },
                      },
                    },
                    "variable": Object {
                      "kind": "Variable",
                      "name": Object {
                        "kind": "Name",
                        "value": "modes",
                      },
                    },
                  },
                ],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 231,
              "start": 0,
            },
          },
          "variables": Object {
            "modes": Array [
              "4",
            ],
          },
        },
      },
    ]
  }
>
  <ApolloProvider
    client={
      ApolloClient {
        "cache": InMemoryCache {
          "addTypename": false,
          "config": Object {
            "addTypename": false,
            "dataIdFromObject": [Function],
            "resultCaching": true,
            "typePolicies": Object {},
          },
          "data": Root {
            "canRead": [Function],
            "data": Object {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": Object {},
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "refs": Object {},
            "rootIds": Object {},
            "sharedLayerGroup": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "storageTrie": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
            "toReference": [Function],
          },
          "getFragmentDoc": [Function],
          "makeVar": [Function],
          "maybeBroadcastWatch": [Function],
          "optimisticData": Root {
            "canRead": [Function],
            "data": Object {},
            "getFieldValue": [Function],
            "group": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": Object {},
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "refs": Object {},
            "rootIds": Object {},
            "sharedLayerGroup": CacheGroup {
              "caching": true,
              "d": [Function],
              "keyMaker": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
            },
            "storageTrie": KeyTrie {
              "makeData": [Function],
              "weakness": true,
            },
            "toReference": [Function],
          },
          "policies": Policies {
            "cache": [Circular],
            "config": Object {
              "cache": [Circular],
              "dataIdFromObject": [Function],
              "possibleTypes": undefined,
              "typePolicies": Object {},
            },
            "fuzzySubtypes": Map {},
            "rootIdsByTypename": Object {
              "Mutation": "ROOT_MUTATION",
              "Query": "ROOT_QUERY",
              "Subscription": "ROOT_SUBSCRIPTION",
            },
            "rootTypenamesById": Object {
              "ROOT_MUTATION": "Mutation",
              "ROOT_QUERY": "Query",
              "ROOT_SUBSCRIPTION": "Subscription",
            },
            "supertypeMap": Map {},
            "toBeAdded": Object {},
            "typePolicies": Object {},
            "usingPossibleTypes": false,
          },
          "storeReader": StoreReader {
            "config": Object {
              "addTypename": false,
              "cache": [Circular],
            },
            "executeSelectionSet": [Function],
            "executeSubSelectedArray": [Function],
            "knownResults": WeakMap {},
          },
          "storeWriter": StoreWriter {
            "cache": [Circular],
            "reader": StoreReader {
              "config": Object {
                "addTypename": false,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
          },
          "txCount": 0,
          "typenameDocumentCache": Map {},
          "watchDep": [Function],
          "watches": Set {},
        },
        "clearStoreCallbacks": Array [],
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": MockLink {
          "addTypename": false,
          "mockedResponsesByKey": Object {
            "{\\"query\\":\\"query PTStopItems($modes: [String]!) {\\\\n  PTStopItems(modes: $modes) {\\\\n    type\\\\n    name\\\\n    key\\\\n    geojson {\\\\n      type\\\\n      geometry {\\\\n        type\\\\n        coordinates\\\\n      }\\\\n    }\\\\n    data\\\\n  }\\\\n}\\\\n\\"}": Array [
              Object {
                "data": Object {
                  "PTStopItems": Array [
                    Object {
                      "data": Object {
                        "_id": "5f6203cc0d5658001cd8fae8",
                        "key": "100713",
                        "keyMapping": Object {
                          "diva": Object {
                            "ojp": "713",
                          },
                          "gi": "1400015",
                        },
                        "loc": Object {
                          "coord": null,
                          "name": "Gaillard",
                          "omc": "24074133",
                          "placeId": "1",
                        },
                        "modes": Array [
                          "4",
                        ],
                        "name": "Gaillard, Libération",
                        "routes": Array [
                          "ojp91017_Hj20",
                          "ojp91017_Rj20",
                        ],
                      },
                      "geojson": Object {
                        "geometry": Object {
                          "coordinates": Array [
                            6.21145,
                            46.19161,
                          ],
                          "type": "Point",
                        },
                        "type": "Feature",
                      },
                      "key": "100713",
                      "name": "Gaillard, Libération",
                      "type": "stop",
                    },
                  ],
                },
                "request": Object {
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "PTStopItems",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [
                                Object {
                                  "kind": "Argument",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "modes",
                                  },
                                  "value": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "modes",
                                    },
                                  },
                                },
                              ],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "PTStopItems",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "type",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "name",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "key",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "geojson",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "type",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "geometry",
                                          },
                                          "selectionSet": Object {
                                            "kind": "SelectionSet",
                                            "selections": Array [
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "type",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "coordinates",
                                                },
                                                "selectionSet": undefined,
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "data",
                                    },
                                    "selectionSet": undefined,
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [
                          Object {
                            "defaultValue": undefined,
                            "directives": Array [],
                            "kind": "VariableDefinition",
                            "type": Object {
                              "kind": "NonNullType",
                              "type": Object {
                                "kind": "ListType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                            },
                            "variable": Object {
                              "kind": "Variable",
                              "name": Object {
                                "kind": "Name",
                                "value": "modes",
                              },
                            },
                          },
                        ],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 231,
                      "start": 0,
                    },
                  },
                  "variables": Object {
                    "modes": Array [
                      "4",
                    ],
                  },
                },
              },
            ],
          },
        },
        "localState": LocalState {
          "cache": InMemoryCache {
            "addTypename": false,
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "resultCaching": true,
              "typePolicies": Object {},
            },
            "data": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": Object {},
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": Object {},
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": Object {},
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "config": Object {
                "addTypename": false,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "reader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "typenameDocumentCache": Map {},
            "watchDep": [Function],
            "watches": Set {},
          },
          "client": [Circular],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "assumeImmutableResults": false,
          "cache": InMemoryCache {
            "addTypename": false,
            "config": Object {
              "addTypename": false,
              "dataIdFromObject": [Function],
              "resultCaching": true,
              "typePolicies": Object {},
            },
            "data": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": Object {},
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "toReference": [Function],
            },
            "getFragmentDoc": [Function],
            "makeVar": [Function],
            "maybeBroadcastWatch": [Function],
            "optimisticData": Root {
              "canRead": [Function],
              "data": Object {},
              "getFieldValue": [Function],
              "group": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": Object {},
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "refs": Object {},
              "rootIds": Object {},
              "sharedLayerGroup": CacheGroup {
                "caching": true,
                "d": [Function],
                "keyMaker": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
              },
              "storageTrie": KeyTrie {
                "makeData": [Function],
                "weakness": true,
              },
              "toReference": [Function],
            },
            "policies": Policies {
              "cache": [Circular],
              "config": Object {
                "cache": [Circular],
                "dataIdFromObject": [Function],
                "possibleTypes": undefined,
                "typePolicies": Object {},
              },
              "fuzzySubtypes": Map {},
              "rootIdsByTypename": Object {
                "Mutation": "ROOT_MUTATION",
                "Query": "ROOT_QUERY",
                "Subscription": "ROOT_SUBSCRIPTION",
              },
              "rootTypenamesById": Object {
                "ROOT_MUTATION": "Mutation",
                "ROOT_QUERY": "Query",
                "ROOT_SUBSCRIPTION": "Subscription",
              },
              "supertypeMap": Map {},
              "toBeAdded": Object {},
              "typePolicies": Object {},
              "usingPossibleTypes": false,
            },
            "storeReader": StoreReader {
              "config": Object {
                "addTypename": false,
                "cache": [Circular],
              },
              "executeSelectionSet": [Function],
              "executeSubSelectedArray": [Function],
              "knownResults": WeakMap {},
            },
            "storeWriter": StoreWriter {
              "cache": [Circular],
              "reader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
            },
            "txCount": 0,
            "typenameDocumentCache": Map {},
            "watchDep": [Function],
            "watches": Set {},
          },
          "clientAwareness": Object {
            "name": undefined,
            "version": undefined,
          },
          "fetchCancelFns": Map {},
          "inFlightLinkObservables": Map {},
          "link": MockLink {
            "addTypename": false,
            "mockedResponsesByKey": Object {
              "{\\"query\\":\\"query PTStopItems($modes: [String]!) {\\\\n  PTStopItems(modes: $modes) {\\\\n    type\\\\n    name\\\\n    key\\\\n    geojson {\\\\n      type\\\\n      geometry {\\\\n        type\\\\n        coordinates\\\\n      }\\\\n    }\\\\n    data\\\\n  }\\\\n}\\\\n\\"}": Array [
                Object {
                  "data": Object {
                    "PTStopItems": Array [
                      Object {
                        "data": Object {
                          "_id": "5f6203cc0d5658001cd8fae8",
                          "key": "100713",
                          "keyMapping": Object {
                            "diva": Object {
                              "ojp": "713",
                            },
                            "gi": "1400015",
                          },
                          "loc": Object {
                            "coord": null,
                            "name": "Gaillard",
                            "omc": "24074133",
                            "placeId": "1",
                          },
                          "modes": Array [
                            "4",
                          ],
                          "name": "Gaillard, Libération",
                          "routes": Array [
                            "ojp91017_Hj20",
                            "ojp91017_Rj20",
                          ],
                        },
                        "geojson": Object {
                          "geometry": Object {
                            "coordinates": Array [
                              6.21145,
                              46.19161,
                            ],
                            "type": "Point",
                          },
                          "type": "Feature",
                        },
                        "key": "100713",
                        "name": "Gaillard, Libération",
                        "type": "stop",
                      },
                    ],
                  },
                  "request": Object {
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "PTStopItems",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "modes",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "modes",
                                      },
                                    },
                                  },
                                ],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "PTStopItems",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "type",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "name",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "key",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "geojson",
                                      },
                                      "selectionSet": Object {
                                        "kind": "SelectionSet",
                                        "selections": Array [
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "type",
                                            },
                                            "selectionSet": undefined,
                                          },
                                          Object {
                                            "alias": undefined,
                                            "arguments": Array [],
                                            "directives": Array [],
                                            "kind": "Field",
                                            "name": Object {
                                              "kind": "Name",
                                              "value": "geometry",
                                            },
                                            "selectionSet": Object {
                                              "kind": "SelectionSet",
                                              "selections": Array [
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "type",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                                Object {
                                                  "alias": undefined,
                                                  "arguments": Array [],
                                                  "directives": Array [],
                                                  "kind": "Field",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "coordinates",
                                                  },
                                                  "selectionSet": undefined,
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "data",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [
                            Object {
                              "defaultValue": undefined,
                              "directives": Array [],
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "ListType",
                                  "type": Object {
                                    "kind": "NamedType",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "String",
                                    },
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "modes",
                                },
                              },
                            },
                          ],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 231,
                        "start": 0,
                      },
                    },
                    "variables": Object {
                      "modes": Array [
                        "4",
                      ],
                    },
                  },
                },
              ],
            },
          },
          "localState": LocalState {
            "cache": InMemoryCache {
              "addTypename": false,
              "config": Object {
                "addTypename": false,
                "dataIdFromObject": [Function],
                "resultCaching": true,
                "typePolicies": Object {},
              },
              "data": Root {
                "canRead": [Function],
                "data": Object {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": Object {},
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {},
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "toReference": [Function],
              },
              "getFragmentDoc": [Function],
              "makeVar": [Function],
              "maybeBroadcastWatch": [Function],
              "optimisticData": Root {
                "canRead": [Function],
                "data": Object {},
                "getFieldValue": [Function],
                "group": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "policies": Policies {
                  "cache": [Circular],
                  "config": Object {
                    "cache": [Circular],
                    "dataIdFromObject": [Function],
                    "possibleTypes": undefined,
                    "typePolicies": Object {},
                  },
                  "fuzzySubtypes": Map {},
                  "rootIdsByTypename": Object {
                    "Mutation": "ROOT_MUTATION",
                    "Query": "ROOT_QUERY",
                    "Subscription": "ROOT_SUBSCRIPTION",
                  },
                  "rootTypenamesById": Object {
                    "ROOT_MUTATION": "Mutation",
                    "ROOT_QUERY": "Query",
                    "ROOT_SUBSCRIPTION": "Subscription",
                  },
                  "supertypeMap": Map {},
                  "toBeAdded": Object {},
                  "typePolicies": Object {},
                  "usingPossibleTypes": false,
                },
                "refs": Object {},
                "rootIds": Object {},
                "sharedLayerGroup": CacheGroup {
                  "caching": true,
                  "d": [Function],
                  "keyMaker": KeyTrie {
                    "makeData": [Function],
                    "weakness": true,
                  },
                },
                "storageTrie": KeyTrie {
                  "makeData": [Function],
                  "weakness": true,
                },
                "toReference": [Function],
              },
              "policies": Policies {
                "cache": [Circular],
                "config": Object {
                  "cache": [Circular],
                  "dataIdFromObject": [Function],
                  "possibleTypes": undefined,
                  "typePolicies": Object {},
                },
                "fuzzySubtypes": Map {},
                "rootIdsByTypename": Object {
                  "Mutation": "ROOT_MUTATION",
                  "Query": "ROOT_QUERY",
                  "Subscription": "ROOT_SUBSCRIPTION",
                },
                "rootTypenamesById": Object {
                  "ROOT_MUTATION": "Mutation",
                  "ROOT_QUERY": "Query",
                  "ROOT_SUBSCRIPTION": "Subscription",
                },
                "supertypeMap": Map {},
                "toBeAdded": Object {},
                "typePolicies": Object {},
                "usingPossibleTypes": false,
              },
              "storeReader": StoreReader {
                "config": Object {
                  "addTypename": false,
                  "cache": [Circular],
                },
                "executeSelectionSet": [Function],
                "executeSubSelectedArray": [Function],
                "knownResults": WeakMap {},
              },
              "storeWriter": StoreWriter {
                "cache": [Circular],
                "reader": StoreReader {
                  "config": Object {
                    "addTypename": false,
                    "cache": [Circular],
                  },
                  "executeSelectionSet": [Function],
                  "executeSubSelectedArray": [Function],
                  "knownResults": WeakMap {},
                },
              },
              "txCount": 0,
              "typenameDocumentCache": Map {},
              "watchDep": [Function],
              "watches": Set {},
            },
            "client": [Circular],
          },
          "mutationIdCounter": 1,
          "onBroadcast": undefined,
          "queries": Map {},
          "queryDeduplication": true,
          "queryIdCounter": 1,
          "requestIdCounter": 1,
          "ssrMode": false,
          "transformCache": WeakMap {},
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "typeDefs": undefined,
        "version": "3.3.6",
        "watchQuery": [Function],
      }
    }
  >
    <MainRoot>
      <div
        className="Prototyp"
        style={
          Object {
            "position": "relative",
          }
        }
      >
        <Row
          gutter={
            Array [
              8,
              8,
            ]
          }
        >
          <div
            className="ant-row"
            style={
              Object {
                "marginBottom": 4,
                "marginLeft": -4,
                "marginRight": -4,
                "marginTop": -4,
              }
            }
          >
            <Col
              xs={24}
            >
              <div
                className="ant-col ant-col-xs-24"
                style={
                  Object {
                    "paddingBottom": 4,
                    "paddingLeft": 4,
                    "paddingRight": 4,
                    "paddingTop": 4,
                  }
                }
              >
                <Memo(LoadStopSequence)
                  currentMode={Array []}
                  onClearAll={[Function]}
                  onDeleteStopSequence={[Function]}
                  onLoadMode={[Function]}
                  onStopSequenceSearch={[Function]}
                  onStopsQuery={[Function]}
                  ondisplayStopSequence={[Function]}
                  stopSequenceList={Array []}
                >
                  <Card>
                    <div
                      className="ant-card ant-card-bordered"
                    >
                      <div
                        className="ant-card-body"
                        style={Object {}}
                      >
                        <ForwardRef(InternalForm)
                          form={
                            Object {
                              "__INTERNAL__": Object {
                                "itemRef": [Function],
                                "name": undefined,
                              },
                              "getFieldError": [Function],
                              "getFieldInstance": [Function],
                              "getFieldValue": [Function],
                              "getFieldsError": [Function],
                              "getFieldsValue": [Function],
                              "getInternalHooks": [Function],
                              "isFieldTouched": [Function],
                              "isFieldValidating": [Function],
                              "isFieldsTouched": [Function],
                              "isFieldsValidating": [Function],
                              "resetFields": [Function],
                              "scrollToField": [Function],
                              "setFields": [Function],
                              "setFieldsValue": [Function],
                              "submit": [Function],
                              "validateFields": [Function],
                            }
                          }
                          layout="vertical"
                        >
                          <SizeContextProvider>
                            <ForwardRef(Form)
                              className="ant-form ant-form-vertical"
                              form={
                                Object {
                                  "__INTERNAL__": Object {
                                    "itemRef": [Function],
                                    "name": undefined,
                                  },
                                  "getFieldError": [Function],
                                  "getFieldInstance": [Function],
                                  "getFieldValue": [Function],
                                  "getFieldsError": [Function],
                                  "getFieldsValue": [Function],
                                  "getInternalHooks": [Function],
                                  "isFieldTouched": [Function],
                                  "isFieldValidating": [Function],
                                  "isFieldsTouched": [Function],
                                  "isFieldsValidating": [Function],
                                  "resetFields": [Function],
                                  "scrollToField": [Function],
                                  "setFields": [Function],
                                  "setFieldsValue": [Function],
                                  "submit": [Function],
                                  "validateFields": [Function],
                                }
                              }
                              onFinishFailed={[Function]}
                            >
                              <form
                                className="ant-form ant-form-vertical"
                                onSubmit={[Function]}
                              >
                                <FormItem>
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        prefixCls="ant-form"
                                        requiredMark={true}
                                      />
                                      <FormItemInput
                                        errors={Array []}
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        validateStatus=""
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <ForwardRef
                                                  id="radioButton"
                                                  onChange={[Function]}
                                                  value="load"
                                                >
                                                  <div
                                                    className="ant-radio-group ant-radio-group-outline"
                                                    id="radioButton"
                                                  >
                                                    <ForwardRef(RadioButton)
                                                      id="load_button"
                                                      value="load"
                                                    >
                                                      <Radio
                                                        checked={true}
                                                        id="load_button"
                                                        prefixCls="ant-radio-button"
                                                        type="radio"
                                                        value="load"
                                                      >
                                                        <label
                                                          className="ant-radio-button-wrapper ant-radio-button-wrapper-checked"
                                                        >
                                                          <Checkbox
                                                            checked={true}
                                                            className=""
                                                            defaultChecked={false}
                                                            id="load_button"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyPress={[Function]}
                                                            onKeyUp={[Function]}
                                                            prefixCls="ant-radio-button"
                                                            style={Object {}}
                                                            type="radio"
                                                            value="load"
                                                          >
                                                            <span
                                                              className="ant-radio-button ant-radio-button-checked"
                                                              style={Object {}}
                                                            >
                                                              <input
                                                                checked={true}
                                                                className="ant-radio-button-input"
                                                                id="load_button"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                onKeyDown={[Function]}
                                                                onKeyPress={[Function]}
                                                                onKeyUp={[Function]}
                                                                type="radio"
                                                                value="load"
                                                              />
                                                              <span
                                                                className="ant-radio-button-inner"
                                                              />
                                                            </span>
                                                          </Checkbox>
                                                          <span>
                                                            Load
                                                          </span>
                                                        </label>
                                                      </Radio>
                                                    </ForwardRef(RadioButton)>
                                                    <ForwardRef(RadioButton)
                                                      id="new_button"
                                                      value="new"
                                                    >
                                                      <Radio
                                                        checked={false}
                                                        id="new_button"
                                                        prefixCls="ant-radio-button"
                                                        type="radio"
                                                        value="new"
                                                      >
                                                        <label
                                                          className="ant-radio-button-wrapper"
                                                        >
                                                          <Checkbox
                                                            checked={false}
                                                            className=""
                                                            defaultChecked={false}
                                                            id="new_button"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyPress={[Function]}
                                                            onKeyUp={[Function]}
                                                            prefixCls="ant-radio-button"
                                                            style={Object {}}
                                                            type="radio"
                                                            value="new"
                                                          >
                                                            <span
                                                              className="ant-radio-button"
                                                              style={Object {}}
                                                            >
                                                              <input
                                                                checked={false}
                                                                className="ant-radio-button-input"
                                                                id="new_button"
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                onKeyDown={[Function]}
                                                                onKeyPress={[Function]}
                                                                onKeyUp={[Function]}
                                                                type="radio"
                                                                value="new"
                                                              />
                                                              <span
                                                                className="ant-radio-button-inner"
                                                              />
                                                            </span>
                                                          </Checkbox>
                                                          <span>
                                                            New
                                                          </span>
                                                        </label>
                                                      </Radio>
                                                    </ForwardRef(RadioButton)>
                                                  </div>
                                                </ForwardRef>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </FormItem>
                                <FormItem
                                  label="Stop sequence name"
                                >
                                  <Row
                                    className="ant-form-item"
                                    key="row"
                                  >
                                    <div
                                      className="ant-row ant-form-item"
                                      style={Object {}}
                                    >
                                      <FormItemLabel
                                        label="Stop sequence name"
                                        prefixCls="ant-form"
                                        requiredMark={true}
                                      >
                                        <Col
                                          className="ant-form-item-label"
                                        >
                                          <div
                                            className="ant-col ant-form-item-label"
                                            style={Object {}}
                                          >
                                            <label
                                              className=""
                                              title="Stop sequence name"
                                            >
                                              Stop sequence name
                                            </label>
                                          </div>
                                        </Col>
                                      </FormItemLabel>
                                      <FormItemInput
                                        errors={Array []}
                                        label="Stop sequence name"
                                        onDomErrorVisibleChange={[Function]}
                                        prefixCls="ant-form"
                                        status=""
                                        validateStatus=""
                                      >
                                        <Col
                                          className="ant-form-item-control"
                                        >
                                          <div
                                            className="ant-col ant-form-item-control"
                                            style={Object {}}
                                          >
                                            <div
                                              className="ant-form-item-control-input"
                                            >
                                              <div
                                                className="ant-form-item-control-input-content"
                                              >
                                                <ForwardRef(AutoComplete)
                                                  allowClear={true}
                                                  id="stopSequence_autoComplete"
                                                  onChange={[Function]}
                                                  onSelect={[Function]}
                                                  placeholder="Seach stop sequence by name"
                                                  value=""
                                                >
                                                  <ForwardRef(InternalSelect)
                                                    allowClear={true}
                                                    className="ant-select-auto-complete"
                                                    id="stopSequence_autoComplete"
                                                    mode="SECRET_COMBOBOX_MODE_DO_NOT_USE"
                                                    onChange={[Function]}
                                                    onSelect={[Function]}
                                                    placeholder="Seach stop sequence by name"
                                                    prefixCls="ant-select"
                                                    value=""
                                                  >
                                                    <Select
                                                      allowClear={true}
                                                      className="ant-select-auto-complete"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      dropdownClassName=""
                                                      id="stopSequence_autoComplete"
                                                      inputIcon={[Function]}
                                                      listHeight={256}
                                                      listItemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      mode="combobox"
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onSelect={[Function]}
                                                      placeholder="Seach stop sequence by name"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      transitionName="slide-up"
                                                      value=""
                                                    >
                                                      <ForwardRef(Select)
                                                        allowClear={true}
                                                        className="ant-select-auto-complete"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        dropdownClassName=""
                                                        id="stopSequence_autoComplete"
                                                        inputIcon={[Function]}
                                                        listHeight={256}
                                                        listItemHeight={24}
                                                        menuItemSelectedIcon={null}
                                                        mode="combobox"
                                                        notFoundContent={null}
                                                        onChange={[Function]}
                                                        onSelect={[Function]}
                                                        placeholder="Seach stop sequence by name"
                                                        prefixCls="ant-select"
                                                        removeIcon={<ForwardRef(CloseOutlined) />}
                                                        transitionName="slide-up"
                                                        value=""
                                                      >
                                                        <div
                                                          className="ant-select ant-select-auto-complete ant-select-single ant-select-allow-clear ant-select-show-search"
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          onMouseDown={[Function]}
                                                        >
                                                          <SelectTrigger
                                                            containerWidth={null}
                                                            dropdownClassName=""
                                                            empty={true}
                                                            getTriggerDOMNode={[Function]}
                                                            popupElement={
                                                              <ForwardRef(OptionList)
                                                                childrenAsData={true}
                                                                defaultActiveFirstOption={false}
                                                                flattenOptions={Array []}
                                                                height={256}
                                                                id="stopSequence_autoComplete"
                                                                itemHeight={24}
                                                                menuItemSelectedIcon={null}
                                                                multiple={false}
                                                                notFoundContent={null}
                                                                onActiveValue={[Function]}
                                                                onMouseEnter={[Function]}
                                                                onSelect={[Function]}
                                                                onToggleOpen={[Function]}
                                                                options={Array []}
                                                                prefixCls="ant-select"
                                                                searchValue=""
                                                                values={Set {}}
                                                                virtual={true}
                                                              />
                                                            }
                                                            prefixCls="ant-select"
                                                            transitionName="slide-up"
                                                            visible={false}
                                                          >
                                                            <Trigger
                                                              action={Array []}
                                                              afterPopupVisibleChange={[Function]}
                                                              autoDestroy={false}
                                                              blurDelay={0.15}
                                                              builtinPlacements={
                                                                Object {
                                                                  "bottomLeft": Object {
                                                                    "offset": Array [
                                                                      0,
                                                                      4,
                                                                    ],
                                                                    "overflow": Object {
                                                                      "adjustX": 0,
                                                                      "adjustY": 1,
                                                                    },
                                                                    "points": Array [
                                                                      "tl",
                                                                      "bl",
                                                                    ],
                                                                  },
                                                                  "bottomRight": Object {
                                                                    "offset": Array [
                                                                      0,
                                                                      4,
                                                                    ],
                                                                    "overflow": Object {
                                                                      "adjustX": 0,
                                                                      "adjustY": 1,
                                                                    },
                                                                    "points": Array [
                                                                      "tr",
                                                                      "br",
                                                                    ],
                                                                  },
                                                                  "topLeft": Object {
                                                                    "offset": Array [
                                                                      0,
                                                                      -4,
                                                                    ],
                                                                    "overflow": Object {
                                                                      "adjustX": 0,
                                                                      "adjustY": 1,
                                                                    },
                                                                    "points": Array [
                                                                      "bl",
                                                                      "tl",
                                                                    ],
                                                                  },
                                                                  "topRight": Object {
                                                                    "offset": Array [
                                                                      0,
                                                                      -4,
                                                                    ],
                                                                    "overflow": Object {
                                                                      "adjustX": 0,
                                                                      "adjustY": 1,
                                                                    },
                                                                    "points": Array [
                                                                      "br",
                                                                      "tr",
                                                                    ],
                                                                  },
                                                                }
                                                              }
                                                              defaultPopupVisible={false}
                                                              destroyPopupOnHide={false}
                                                              focusDelay={0}
                                                              getDocument={[Function]}
                                                              getPopupClassNameFromAlign={[Function]}
                                                              getTriggerDOMNode={[Function]}
                                                              hideAction={Array []}
                                                              mask={false}
                                                              maskClosable={true}
                                                              mouseEnterDelay={0}
                                                              mouseLeaveDelay={0.1}
                                                              onPopupAlign={[Function]}
                                                              onPopupVisibleChange={[Function]}
                                                              popup={
                                                                <div>
                                                                  <ForwardRef(OptionList)
                                                                    childrenAsData={true}
                                                                    defaultActiveFirstOption={false}
                                                                    flattenOptions={Array []}
                                                                    height={256}
                                                                    id="stopSequence_autoComplete"
                                                                    itemHeight={24}
                                                                    menuItemSelectedIcon={null}
                                                                    multiple={false}
                                                                    notFoundContent={null}
                                                                    onActiveValue={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onSelect={[Function]}
                                                                    onToggleOpen={[Function]}
                                                                    options={Array []}
                                                                    prefixCls="ant-select"
                                                                    searchValue=""
                                                                    values={Set {}}
                                                                    virtual={true}
                                                                  />
                                                                </div>
                                                              }
                                                              popupAlign={Object {}}
                                                              popupClassName="ant-select-dropdown-empty"
                                                              popupPlacement="bottomLeft"
                                                              popupStyle={
                                                                Object {
                                                                  "minWidth": null,
                                                                  "width": null,
                                                                }
                                                              }
                                                              popupTransitionName="slide-up"
                                                              popupVisible={false}
                                                              prefixCls="ant-select-dropdown"
                                                              showAction={Array []}
                                                            >
                                                              <Selector
                                                                accessibilityIndex={0}
                                                                activeValue={null}
                                                                allowClear={true}
                                                                className="ant-select-auto-complete"
                                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                domRef={
                                                                  Object {
                                                                    "current": <div
                                                                      class="ant-select-selector"
                                                                    >
                                                                      <span
                                                                        class="ant-select-selection-search"
                                                                      >
                                                                        <input
                                                                          aria-activedescendant="stopSequence_autoComplete_list_0"
                                                                          aria-autocomplete="list"
                                                                          aria-controls="stopSequence_autoComplete_list"
                                                                          aria-haspopup="listbox"
                                                                          aria-owns="stopSequence_autoComplete_list"
                                                                          autocomplete="off"
                                                                          class="ant-select-selection-search-input"
                                                                          id="stopSequence_autoComplete"
                                                                          role="combobox"
                                                                          type="search"
                                                                          value=""
                                                                        />
                                                                      </span>
                                                                      <span
                                                                        class="ant-select-selection-placeholder"
                                                                      >
                                                                        Seach stop sequence by name
                                                                      </span>
                                                                    </div>,
                                                                  }
                                                                }
                                                                dropdownClassName=""
                                                                id="stopSequence_autoComplete"
                                                                inputElement={null}
                                                                inputIcon={[Function]}
                                                                key="trigger"
                                                                listHeight={256}
                                                                listItemHeight={24}
                                                                menuItemSelectedIcon={null}
                                                                mode="combobox"
                                                                multiple={false}
                                                                notFoundContent={null}
                                                                onChange={[Function]}
                                                                onSearch={[Function]}
                                                                onSearchSubmit={[Function]}
                                                                onSelect={[Function]}
                                                                onToggleOpen={[Function]}
                                                                placeholder="Seach stop sequence by name"
                                                                prefixCls="ant-select"
                                                                removeIcon={<ForwardRef(CloseOutlined) />}
                                                                searchValue=""
                                                                showSearch={true}
                                                                tokenWithEnter={false}
                                                                transitionName="slide-up"
                                                                value=""
                                                                values={Array []}
                                                              >
                                                                <div
                                                                  className="ant-select-selector"
                                                                  onClick={[Function]}
                                                                  onMouseDown={[Function]}
                                                                >
                                                                  <SingleSelector
                                                                    accessibilityIndex={0}
                                                                    activeValue={null}
                                                                    allowClear={true}
                                                                    className="ant-select-auto-complete"
                                                                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                    domRef={
                                                                      Object {
                                                                        "current": <div
                                                                          class="ant-select-selector"
                                                                        >
                                                                          <span
                                                                            class="ant-select-selection-search"
                                                                          >
                                                                            <input
                                                                              aria-activedescendant="stopSequence_autoComplete_list_0"
                                                                              aria-autocomplete="list"
                                                                              aria-controls="stopSequence_autoComplete_list"
                                                                              aria-haspopup="listbox"
                                                                              aria-owns="stopSequence_autoComplete_list"
                                                                              autocomplete="off"
                                                                              class="ant-select-selection-search-input"
                                                                              id="stopSequence_autoComplete"
                                                                              role="combobox"
                                                                              type="search"
                                                                              value=""
                                                                            />
                                                                          </span>
                                                                          <span
                                                                            class="ant-select-selection-placeholder"
                                                                          >
                                                                            Seach stop sequence by name
                                                                          </span>
                                                                        </div>,
                                                                      }
                                                                    }
                                                                    dropdownClassName=""
                                                                    id="stopSequence_autoComplete"
                                                                    inputElement={null}
                                                                    inputIcon={[Function]}
                                                                    inputRef={
                                                                      Object {
                                                                        "current": <input
                                                                          aria-activedescendant="stopSequence_autoComplete_list_0"
                                                                          aria-autocomplete="list"
                                                                          aria-controls="stopSequence_autoComplete_list"
                                                                          aria-haspopup="listbox"
                                                                          aria-owns="stopSequence_autoComplete_list"
                                                                          autocomplete="off"
                                                                          class="ant-select-selection-search-input"
                                                                          id="stopSequence_autoComplete"
                                                                          role="combobox"
                                                                          type="search"
                                                                          value=""
                                                                        />,
                                                                      }
                                                                    }
                                                                    listHeight={256}
                                                                    listItemHeight={24}
                                                                    menuItemSelectedIcon={null}
                                                                    mode="combobox"
                                                                    multiple={false}
                                                                    notFoundContent={null}
                                                                    onChange={[Function]}
                                                                    onInputChange={[Function]}
                                                                    onInputCompositionEnd={[Function]}
                                                                    onInputCompositionStart={[Function]}
                                                                    onInputKeyDown={[Function]}
                                                                    onInputMouseDown={[Function]}
                                                                    onInputPaste={[Function]}
                                                                    onSearch={[Function]}
                                                                    onSearchSubmit={[Function]}
                                                                    onSelect={[Function]}
                                                                    onToggleOpen={[Function]}
                                                                    placeholder="Seach stop sequence by name"
                                                                    prefixCls="ant-select"
                                                                    removeIcon={<ForwardRef(CloseOutlined) />}
                                                                    searchValue=""
                                                                    showSearch={true}
                                                                    tokenWithEnter={false}
                                                                    transitionName="slide-up"
                                                                    value=""
                                                                    values={Array []}
                                                                  >
                                                                    <span
                                                                      className="ant-select-selection-search"
                                                                    >
                                                                      <Input
                                                                        accessibilityIndex={0}
                                                                        attrs={Object {}}
                                                                        editable={true}
                                                                        id="stopSequence_autoComplete"
                                                                        inputElement={null}
                                                                        onChange={[Function]}
                                                                        onCompositionEnd={[Function]}
                                                                        onCompositionStart={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onPaste={[Function]}
                                                                        prefixCls="ant-select"
                                                                        value=""
                                                                      >
                                                                        <input
                                                                          aria-activedescendant="stopSequence_autoComplete_list_0"
                                                                          aria-autocomplete="list"
                                                                          aria-controls="stopSequence_autoComplete_list"
                                                                          aria-haspopup="listbox"
                                                                          aria-owns="stopSequence_autoComplete_list"
                                                                          autoComplete="off"
                                                                          className="ant-select-selection-search-input"
                                                                          id="stopSequence_autoComplete"
                                                                          onChange={[Function]}
                                                                          onCompositionEnd={[Function]}
                                                                          onCompositionStart={[Function]}
                                                                          onKeyDown={[Function]}
                                                                          onMouseDown={[Function]}
                                                                          onPaste={[Function]}
                                                                          readOnly={false}
                                                                          role="combobox"
                                                                          style={
                                                                            Object {
                                                                              "opacity": null,
                                                                            }
                                                                          }
                                                                          type="search"
                                                                          unselectable={null}
                                                                          value=""
                                                                        />
                                                                      </Input>
                                                                    </span>
                                                                    <span
                                                                      className="ant-select-selection-placeholder"
                                                                    >
                                                                      Seach stop sequence by name
                                                                    </span>
                                                                  </SingleSelector>
                                                                </div>
                                                              </Selector>
                                                            </Trigger>
                                                          </SelectTrigger>
                                                        </div>
                                                      </ForwardRef(Select)>
                                                    </Select>
                                                  </ForwardRef(InternalSelect)>
                                                </ForwardRef(AutoComplete)>
                                              </div>
                                            </div>
                                            <ErrorList
                                              errors={Array []}
                                              onDomErrorVisibleChange={[Function]}
                                            >
                                              <CSSMotion
                                                motionAppear={true}
                                                motionDeadline={500}
                                                motionName="show-help"
                                                onLeaveEnd={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </ErrorList>
                                          </div>
                                        </Col>
                                      </FormItemInput>
                                    </div>
                                  </Row>
                                </FormItem>
                              </form>
                            </ForwardRef(Form)>
                          </SizeContextProvider>
                        </ForwardRef(InternalForm)>
                      </div>
                    </div>
                  </Card>
                </Memo(LoadStopSequence)>
              </div>
            </Col>
            <Col
              xs={24}
            >
              <div
                className="ant-col ant-col-xs-24"
                style={
                  Object {
                    "paddingBottom": 4,
                    "paddingLeft": 4,
                    "paddingRight": 4,
                    "paddingTop": 4,
                  }
                }
              >
                <Memo(SaveStopSequenceForm)
                  loadStopSequenceSection={true}
                  onSaveStopSequence={[Function]}
                  stateDND={
                    Object {
                      "suggestions": Object {
                        "items": Array [],
                        "title": "Suggestion",
                      },
                      "trajekt": Object {
                        "items": Array [],
                        "title": "Stop sequence",
                      },
                    }
                  }
                >
                  <Card
                    bordered={true}
                  >
                    <div
                      className="ant-card ant-card-bordered"
                    >
                      <div
                        className="ant-card-body"
                        style={Object {}}
                      >
                        <Collapse
                          activeKey="2"
                        >
                          <Collapse
                            accordion={false}
                            activeKey="2"
                            bordered={true}
                            className="ant-collapse-icon-position-left"
                            destroyInactivePanel={false}
                            expandIcon={[Function]}
                            onChange={[Function]}
                            openMotion={
                              Object {
                                "leavedClassName": "ant-collapse-content-hidden",
                                "motionAppear": false,
                                "motionDeadline": 500,
                                "motionName": "ant-motion-collapse",
                                "onAppearActive": [Function],
                                "onAppearEnd": [Function],
                                "onAppearStart": [Function],
                                "onEnterActive": [Function],
                                "onEnterEnd": [Function],
                                "onEnterStart": [Function],
                                "onLeaveActive": [Function],
                                "onLeaveEnd": [Function],
                                "onLeaveStart": [Function],
                              }
                            }
                            prefixCls="ant-collapse"
                          >
                            <div
                              className="ant-collapse ant-collapse-icon-position-left"
                              role={null}
                            >
                              <CollapsePanel
                                accordion={false}
                                destroyInactivePanel={false}
                                expandIcon={[Function]}
                                header="Stop sequence save form"
                                isActive={false}
                                key="1"
                                onItemClick={[Function]}
                                openMotion={
                                  Object {
                                    "leavedClassName": "ant-collapse-content-hidden",
                                    "motionAppear": false,
                                    "motionDeadline": 500,
                                    "motionName": "ant-motion-collapse",
                                    "onAppearActive": [Function],
                                    "onAppearEnd": [Function],
                                    "onAppearStart": [Function],
                                    "onEnterActive": [Function],
                                    "onEnterEnd": [Function],
                                    "onEnterStart": [Function],
                                    "onLeaveActive": [Function],
                                    "onLeaveEnd": [Function],
                                    "onLeaveStart": [Function],
                                  }
                                }
                                panelKey="1"
                                prefixCls="ant-collapse"
                              >
                                <CollapsePanel
                                  accordion={false}
                                  className=""
                                  destroyInactivePanel={false}
                                  expandIcon={[Function]}
                                  forceRender={false}
                                  header="Stop sequence save form"
                                  headerClass=""
                                  isActive={false}
                                  onItemClick={[Function]}
                                  openMotion={
                                    Object {
                                      "leavedClassName": "ant-collapse-content-hidden",
                                      "motionAppear": false,
                                      "motionDeadline": 500,
                                      "motionName": "ant-motion-collapse",
                                      "onAppearActive": [Function],
                                      "onAppearEnd": [Function],
                                      "onAppearStart": [Function],
                                      "onEnterActive": [Function],
                                      "onEnterEnd": [Function],
                                      "onEnterStart": [Function],
                                      "onLeaveActive": [Function],
                                      "onLeaveEnd": [Function],
                                      "onLeaveStart": [Function],
                                    }
                                  }
                                  panelKey="1"
                                  prefixCls="ant-collapse"
                                  showArrow={true}
                                >
                                  <div
                                    className="ant-collapse-item"
                                  >
                                    <div
                                      aria-expanded={false}
                                      className="ant-collapse-header"
                                      onClick={[Function]}
                                      onKeyPress={[Function]}
                                      role="button"
                                      tabIndex={0}
                                    >
                                      <ForwardRef(RightOutlined)
                                        className="ant-collapse-arrow"
                                      >
                                        <AntdIcon
                                          className="ant-collapse-arrow"
                                          icon={
                                            Object {
                                              "icon": Object {
                                                "attrs": Object {
                                                  "focusable": "false",
                                                  "viewBox": "64 64 896 896",
                                                },
                                                "children": Array [
                                                  Object {
                                                    "attrs": Object {
                                                      "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z",
                                                    },
                                                    "tag": "path",
                                                  },
                                                ],
                                                "tag": "svg",
                                              },
                                              "name": "right",
                                              "theme": "outlined",
                                            }
                                          }
                                        >
                                          <span
                                            aria-label="right"
                                            className="anticon anticon-right ant-collapse-arrow"
                                            role="img"
                                          >
                                            <IconReact
                                              icon={
                                                Object {
                                                  "icon": Object {
                                                    "attrs": Object {
                                                      "focusable": "false",
                                                      "viewBox": "64 64 896 896",
                                                    },
                                                    "children": Array [
                                                      Object {
                                                        "attrs": Object {
                                                          "d": "M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z",
                                                        },
                                                        "tag": "path",
                                                      },
                                                    ],
                                                    "tag": "svg",
                                                  },
                                                  "name": "right",
                                                  "theme": "outlined",
                                                }
                                              }
                                            >
                                              <svg
                                                aria-hidden="true"
                                                data-icon="right"
                                                fill="currentColor"
                                                focusable="false"
                                                height="1em"
                                                key="svg-right"
                                                viewBox="64 64 896 896"
                                                width="1em"
                                              >
                                                <path
                                                  d="M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"
                                                  key="svg-right-svg-0"
                                                />
                                              </svg>
                                            </IconReact>
                                          </span>
                                        </AntdIcon>
                                      </ForwardRef(RightOutlined)>
                                      Stop sequence save form
                                    </div>
                                    <CSSMotion
                                      forceRender={false}
                                      leavedClassName="ant-collapse-content-hidden"
                                      motionAppear={false}
                                      motionDeadline={500}
                                      motionName="ant-motion-collapse"
                                      onAppearActive={[Function]}
                                      onAppearEnd={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterEnd={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveEnd={[Function]}
                                      onLeaveStart={[Function]}
                                      removeOnLeave={false}
                                      visible={false}
                                    >
                                      <DomWrapper>
                                        <PanelContent
                                          className="ant-collapse-content-hidden"
                                          forceRender={false}
                                          isActive={false}
                                          prefixCls="ant-collapse"
                                          role={null}
                                        />
                                      </DomWrapper>
                                    </CSSMotion>
                                  </div>
                                </CollapsePanel>
                              </CollapsePanel>
                            </div>
                          </Collapse>
                        </Collapse>
                      </div>
                    </div>
                  </Card>
                </Memo(SaveStopSequenceForm)>
              </div>
            </Col>
            <Col
              style={
                Object {
                  "height": "60vh",
                }
              }
              xs={24}
              xxl={12}
            >
              <div
                className="ant-col ant-col-xs-24 ant-col-xxl-12"
                style={
                  Object {
                    "height": "60vh",
                    "paddingBottom": 4,
                    "paddingLeft": 4,
                    "paddingRight": 4,
                    "paddingTop": 4,
                  }
                }
              >
                <Component
                  distance={Array []}
                  onAddAfterSelected={[Function]}
                  onAddBeforSelected={[Function]}
                  onClickOnMapMarker={[Function]}
                  onDeleteStop={[Function]}
                  onResetStopSequence={[Function]}
                  onSelectAutoSearch={[Function]}
                  stateDND={
                    Object {
                      "suggestions": Object {
                        "items": Array [],
                        "title": "Suggestion",
                      },
                      "trajekt": Object {
                        "items": Array [],
                        "title": "Stop sequence",
                      },
                    }
                  }
                  stations={Array []}
                >
                  <div
                    id="mapMock"
                  >
                    Map mocked
                  </div>
                </Component>
              </div>
            </Col>
            <Col
              xs={24}
              xxl={12}
            >
              <div
                className="ant-col ant-col-xs-24 ant-col-xxl-12"
                style={
                  Object {
                    "paddingBottom": 4,
                    "paddingLeft": 4,
                    "paddingRight": 4,
                    "paddingTop": 4,
                  }
                }
              >
                <Memo(DragDrop)
                  onAddStopsOnCLick={[Function]}
                  onClickOnDrop={[Function]}
                  onDeleteStop={[Function]}
                  onDragEnd={[Function]}
                  onResetStopSequence={[Function]}
                  stateDND={
                    Object {
                      "suggestions": Object {
                        "items": Array [],
                        "title": "Suggestion",
                      },
                      "trajekt": Object {
                        "items": Array [],
                        "title": "Stop sequence",
                      },
                    }
                  }
                >
                  <DragDropContext
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="1"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            Object {
                              "$$typeof": Symbol(react.context),
                              "Consumer": Object {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": Object {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": Object {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
                          }
                        >
                          <Col
                            xs={24}
                          >
                            <div
                              className="ant-col ant-col-xs-24"
                              style={
                                Object {
                                  "paddingBottom": 4,
                                  "paddingLeft": 4,
                                  "paddingRight": 4,
                                  "paddingTop": 4,
                                }
                              }
                            >
                              <Card
                                title="Suggestion"
                              >
                                <div
                                  className="ant-card ant-card-bordered"
                                >
                                  <div
                                    className="ant-card-head"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-card-head-wrapper"
                                    >
                                      <div
                                        className="ant-card-head-title"
                                      >
                                        Suggestion
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className="ant-card-body"
                                    style={Object {}}
                                  >
                                    <ConnectFunction
                                      direction="vertical"
                                      droppableId="suggestions"
                                      getContainerForClone={[Function]}
                                      ignoreContainerClipping={false}
                                      isCombineEnabled={false}
                                      isDropDisabled={false}
                                      mode="standard"
                                      renderClone={null}
                                      type="DEFAULT"
                                    >
                                      <Droppable
                                        direction="vertical"
                                        droppableId="suggestions"
                                        getContainerForClone={[Function]}
                                        ignoreContainerClipping={false}
                                        isCombineEnabled={false}
                                        isDropDisabled={false}
                                        mode="standard"
                                        placeholder={null}
                                        renderClone={null}
                                        shouldAnimatePlaceholder={false}
                                        snapshot={
                                          Object {
                                            "draggingFromThisWith": null,
                                            "draggingOverWith": null,
                                            "isDraggingOver": false,
                                            "isUsingPlaceholder": false,
                                          }
                                        }
                                        type="DEFAULT"
                                        updateViewportMaxScroll={[Function]}
                                        useClone={null}
                                      >
                                        <div
                                          style={
                                            Object {
                                              "display": "flex",
                                            }
                                          }
                                        >
                                          <Col
                                            lg={12}
                                            xs={24}
                                          >
                                            <div
                                              className="ant-col ant-col-xs-24 ant-col-lg-12"
                                              style={
                                                Object {
                                                  "paddingBottom": 4,
                                                  "paddingLeft": 4,
                                                  "paddingRight": 4,
                                                  "paddingTop": 4,
                                                }
                                              }
                                            >
                                              <div
                                                className="droppable-col"
                                                data-rbd-droppable-context-id="1"
                                                data-rbd-droppable-id="suggestions"
                                              >
                                                <AnimateInOut
                                                  on={null}
                                                  shouldAnimate={false}
                                                />
                                              </div>
                                            </div>
                                          </Col>
                                          <Col
                                            lg={12}
                                          >
                                            <div
                                              className="ant-col ant-col-lg-12"
                                              style={
                                                Object {
                                                  "paddingBottom": 4,
                                                  "paddingLeft": 4,
                                                  "paddingRight": 4,
                                                  "paddingTop": 4,
                                                }
                                              }
                                            >
                                              <div
                                                className="droppable-col"
                                                data-rbd-droppable-context-id="1"
                                                data-rbd-droppable-id="suggestions"
                                              >
                                                <AnimateInOut
                                                  on={null}
                                                  shouldAnimate={false}
                                                />
                                              </div>
                                            </div>
                                          </Col>
                                        </div>
                                      </Droppable>
                                    </ConnectFunction>
                                  </div>
                                </div>
                              </Card>
                            </div>
                          </Col>
                          <Col
                            xs={24}
                          >
                            <div
                              className="ant-col ant-col-xs-24"
                              style={
                                Object {
                                  "paddingBottom": 4,
                                  "paddingLeft": 4,
                                  "paddingRight": 4,
                                  "paddingTop": 4,
                                }
                              }
                            >
                              <Card
                                extra={null}
                                title="Stop sequence"
                              >
                                <div
                                  className="ant-card ant-card-bordered"
                                >
                                  <div
                                    className="ant-card-head"
                                    style={Object {}}
                                  >
                                    <div
                                      className="ant-card-head-wrapper"
                                    >
                                      <div
                                        className="ant-card-head-title"
                                      >
                                        Stop sequence
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className="ant-card-body"
                                    style={Object {}}
                                  >
                                    <div
                                      style={Object {}}
                                    >
                                      <ConnectFunction
                                        direction="vertical"
                                        droppableId="trajekt"
                                        getContainerForClone={[Function]}
                                        ignoreContainerClipping={false}
                                        isCombineEnabled={false}
                                        isDropDisabled={false}
                                        mode="standard"
                                        renderClone={null}
                                        type="DEFAULT"
                                      >
                                        <Droppable
                                          direction="vertical"
                                          droppableId="trajekt"
                                          getContainerForClone={[Function]}
                                          ignoreContainerClipping={false}
                                          isCombineEnabled={false}
                                          isDropDisabled={false}
                                          mode="standard"
                                          placeholder={null}
                                          renderClone={null}
                                          shouldAnimatePlaceholder={false}
                                          snapshot={
                                            Object {
                                              "draggingFromThisWith": null,
                                              "draggingOverWith": null,
                                              "isDraggingOver": false,
                                              "isUsingPlaceholder": false,
                                            }
                                          }
                                          type="DEFAULT"
                                          updateViewportMaxScroll={[Function]}
                                          useClone={null}
                                        >
                                          <div
                                            className="droppable-col"
                                            data-rbd-droppable-context-id="1"
                                            data-rbd-droppable-id="trajekt"
                                          >
                                            <AnimateInOut
                                              on={null}
                                              shouldAnimate={false}
                                            />
                                          </div>
                                        </Droppable>
                                      </ConnectFunction>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            </div>
                          </Col>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                </Memo(DragDrop)>
              </div>
            </Col>
          </div>
        </Row>
      </div>
    </MainRoot>
  </ApolloProvider>
</MockedProvider>
`;
