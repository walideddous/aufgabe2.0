// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavBar component Match snapshot with the Navbar component 1`] = `
<NavBar
  currentMode={Array []}
  currentStopSequenceName={Array []}
  handleDeleteStopSequence={[MockFunction]}
  handleUpdateAfterSave={[MockFunction]}
  isSending={false}
  onClearAll={[MockFunction]}
  onSendRequest={[MockFunction]}
  ondisplayStopSequence={[MockFunction]}
  savedStopSequence={Object {}}
  stateDND={
    Object {
      "trajekt": Object {
        "items": Array [],
        "title": "Stop sequence",
      },
      "vorschlag": Object {
        "items": Array [],
        "title": "Suggestion",
      },
    }
  }
  stopSequenceList={Array []}
  updateDate=""
>
  <Col
    style={
      Object {
        "paddingTop": "20px",
      }
    }
    xs={6}
    xxl={2}
  >
    <div
      className="ant-col ant-col-xs-6 ant-col-xxl-2"
      style={
        Object {
          "paddingTop": "20px",
        }
      }
    >
      <Dropdown
        mouseEnterDelay={0.15}
        mouseLeaveDelay={0.1}
        overlay={
          <Menu
            onClick={[Function]}
          >
            <MenuItem>
              13
            </MenuItem>
            <MenuItem>
              5
            </MenuItem>
            <MenuItem>
              8
            </MenuItem>
            <MenuItem>
              9
            </MenuItem>
            <MenuItem>
              2
            </MenuItem>
            <MenuItem>
              4
            </MenuItem>
          </Menu>
        }
      >
        <ForwardRef(Dropdown)
          mouseEnterDelay={0.15}
          mouseLeaveDelay={0.1}
          overlay={[Function]}
          overlayClassName=""
          placement="bottomLeft"
          prefixCls="ant-dropdown"
          transitionName="slide-up"
        >
          <Trigger
            action={
              Array [
                "hover",
              ]
            }
            afterPopupVisibleChange={[Function]}
            autoDestroy={false}
            blurDelay={0.15}
            builtinPlacements={
              Object {
                "bottomCenter": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tc",
                    "bc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomLeft": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomRight": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topCenter": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bc",
                    "tc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topLeft": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topRight": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
              }
            }
            defaultPopupVisible={false}
            destroyPopupOnHide={false}
            focusDelay={0}
            getDocument={[Function]}
            getPopupClassNameFromAlign={[Function]}
            hideAction={Array []}
            mask={false}
            maskClosable={true}
            mouseEnterDelay={0.15}
            mouseLeaveDelay={0.1}
            onPopupAlign={[Function]}
            onPopupVisibleChange={[Function]}
            overlay={[Function]}
            popup={[Function]}
            popupAlign={Object {}}
            popupClassName=""
            popupPlacement="bottomLeft"
            popupStyle={Object {}}
            popupTransitionName="slide-up"
            prefixCls="ant-dropdown"
            showAction={Array []}
            stretch="minWidth"
          >
            <p
              className="ant-dropdown-trigger ant-dropdown-link"
              key="trigger"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              style={
                Object {
                  "cursor": "pointer",
                }
              }
            >
              <strong>
                Modes : 
              </strong>
               
              <ForwardRef(DownOutlined)>
                <AntdIcon
                  icon={
                    Object {
                      "icon": Object {
                        "attrs": Object {
                          "focusable": "false",
                          "viewBox": "64 64 896 896",
                        },
                        "children": Array [
                          Object {
                            "attrs": Object {
                              "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                            },
                            "tag": "path",
                          },
                        ],
                        "tag": "svg",
                      },
                      "name": "down",
                      "theme": "outlined",
                    }
                  }
                >
                  <span
                    aria-label="down"
                    className="anticon anticon-down"
                    role="img"
                  >
                    <IconReact
                      className=""
                      icon={
                        Object {
                          "icon": Object {
                            "attrs": Object {
                              "focusable": "false",
                              "viewBox": "64 64 896 896",
                            },
                            "children": Array [
                              Object {
                                "attrs": Object {
                                  "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                },
                                "tag": "path",
                              },
                            ],
                            "tag": "svg",
                          },
                          "name": "down",
                          "theme": "outlined",
                        }
                      }
                    >
                      <svg
                        aria-hidden="true"
                        className=""
                        data-icon="down"
                        fill="currentColor"
                        focusable="false"
                        height="1em"
                        key="svg-down"
                        viewBox="64 64 896 896"
                        width="1em"
                      >
                        <path
                          d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                          key="svg-down-svg-0"
                        />
                      </svg>
                    </IconReact>
                  </span>
                </AntdIcon>
              </ForwardRef(DownOutlined)>
            </p>
          </Trigger>
        </ForwardRef(Dropdown)>
      </Dropdown>
    </div>
  </Col>
  <Col
    style={
      Object {
        "paddingTop": "20px",
      }
    }
    xs={6}
    xxl={3}
  >
    <div
      className="ant-col ant-col-xs-6 ant-col-xxl-3"
      style={
        Object {
          "paddingTop": "20px",
        }
      }
    >
      <Dropdown
        disabled={true}
        mouseEnterDelay={0.15}
        mouseLeaveDelay={0.1}
        overlay={
          <Menu
            onClick={[Function]}
          />
        }
      >
        <ForwardRef(Dropdown)
          disabled={true}
          mouseEnterDelay={0.15}
          mouseLeaveDelay={0.1}
          overlay={[Function]}
          overlayClassName=""
          placement="bottomLeft"
          prefixCls="ant-dropdown"
          transitionName="slide-up"
          trigger={Array []}
        >
          <Trigger
            action={Array []}
            afterPopupVisibleChange={[Function]}
            autoDestroy={false}
            blurDelay={0.15}
            builtinPlacements={
              Object {
                "bottomCenter": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tc",
                    "bc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomLeft": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomRight": Object {
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topCenter": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bc",
                    "tc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topLeft": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topRight": Object {
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
              }
            }
            defaultPopupVisible={false}
            destroyPopupOnHide={false}
            disabled={true}
            focusDelay={0}
            getDocument={[Function]}
            getPopupClassNameFromAlign={[Function]}
            hideAction={Array []}
            mask={false}
            maskClosable={true}
            mouseEnterDelay={0.15}
            mouseLeaveDelay={0.1}
            onPopupAlign={[Function]}
            onPopupVisibleChange={[Function]}
            overlay={[Function]}
            popup={[Function]}
            popupAlign={Object {}}
            popupClassName=""
            popupPlacement="bottomLeft"
            popupStyle={Object {}}
            popupTransitionName="slide-up"
            prefixCls="ant-dropdown"
            showAction={Array []}
            stretch="minWidth"
          >
            <p
              className="ant-dropdown-trigger ant-dropdown-link"
              disabled={true}
              key="trigger"
              style={
                Object {
                  "cursor": "pointer",
                }
              }
            >
              <strong>
                Stop sequences : 
              </strong>
               
              <ForwardRef(DownOutlined)>
                <AntdIcon
                  icon={
                    Object {
                      "icon": Object {
                        "attrs": Object {
                          "focusable": "false",
                          "viewBox": "64 64 896 896",
                        },
                        "children": Array [
                          Object {
                            "attrs": Object {
                              "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                            },
                            "tag": "path",
                          },
                        ],
                        "tag": "svg",
                      },
                      "name": "down",
                      "theme": "outlined",
                    }
                  }
                >
                  <span
                    aria-label="down"
                    className="anticon anticon-down"
                    role="img"
                  >
                    <IconReact
                      className=""
                      icon={
                        Object {
                          "icon": Object {
                            "attrs": Object {
                              "focusable": "false",
                              "viewBox": "64 64 896 896",
                            },
                            "children": Array [
                              Object {
                                "attrs": Object {
                                  "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                },
                                "tag": "path",
                              },
                            ],
                            "tag": "svg",
                          },
                          "name": "down",
                          "theme": "outlined",
                        }
                      }
                    >
                      <svg
                        aria-hidden="true"
                        className=""
                        data-icon="down"
                        fill="currentColor"
                        focusable="false"
                        height="1em"
                        key="svg-down"
                        viewBox="64 64 896 896"
                        width="1em"
                      >
                        <path
                          d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                          key="svg-down-svg-0"
                        />
                      </svg>
                    </IconReact>
                  </span>
                </AntdIcon>
              </ForwardRef(DownOutlined)>
              <br />
            </p>
          </Trigger>
        </ForwardRef(Dropdown)>
      </Dropdown>
    </div>
  </Col>
  <Col
    style={
      Object {
        "paddingLeft": "20px",
        "paddingTop": "20px",
      }
    }
    xs={8}
    xxl={3}
  >
    <div
      className="ant-col ant-col-xs-8 ant-col-xxl-3"
      style={
        Object {
          "paddingLeft": "20px",
          "paddingTop": "20px",
        }
      }
    >
      <p>
        <strong>
          Current mode : 
        </strong>
        <br />
        <strong>
          Current stop sequence : 
        </strong>
        <br />
      </p>
    </div>
  </Col>
  <Col
    style={
      Object {
        "display": "flex",
        "justifyContent": "space-between",
        "paddingRight": "20px",
        "paddingTop": "20px",
      }
    }
    xs={16}
    xxl={8}
  >
    <div
      className="ant-col ant-col-xs-16 ant-col-xxl-8"
      style={
        Object {
          "display": "flex",
          "justifyContent": "space-between",
          "paddingRight": "20px",
          "paddingTop": "20px",
        }
      }
    >
      <Button
        block={false}
        disabled={true}
        ghost={false}
        htmlType="button"
        loading={false}
        onClick={[Function]}
        type="primary"
      >
        <Wave>
          <button
            className="ant-btn ant-btn-primary"
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            <LoadingIcon
              existIcon={false}
              loading={false}
              prefixCls="ant-btn"
            >
              <CSSMotion
                motionName="ant-btn-loading-icon-motion"
                onAppearActive={[Function]}
                onAppearStart={[Function]}
                onEnterActive={[Function]}
                onEnterStart={[Function]}
                onLeaveActive={[Function]}
                onLeaveStart={[Function]}
                removeOnLeave={true}
                visible={false}
              >
                <DomWrapper />
              </CSSMotion>
            </LoadingIcon>
            <span
              key=".0"
            >
              Select a Mode
            </span>
          </button>
        </Wave>
      </Button>
      <Button
        block={false}
        danger={true}
        disabled={true}
        ghost={false}
        htmlType="button"
        loading={false}
        onClick={[Function]}
        type="primary"
      >
        <Wave>
          <button
            className="ant-btn ant-btn-primary ant-btn-dangerous"
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            <LoadingIcon
              existIcon={false}
              loading={false}
              prefixCls="ant-btn"
            >
              <CSSMotion
                motionName="ant-btn-loading-icon-motion"
                onAppearActive={[Function]}
                onAppearStart={[Function]}
                onEnterActive={[Function]}
                onEnterStart={[Function]}
                onLeaveActive={[Function]}
                onLeaveStart={[Function]}
                removeOnLeave={true}
                visible={false}
              >
                <DomWrapper />
              </CSSMotion>
            </LoadingIcon>
            <span
              key=".0"
            >
              Reset
            </span>
          </button>
        </Wave>
      </Button>
      <Badge>
        <span
          className="ant-badge"
        >
          <Button
            block={false}
            disabled={true}
            ghost={false}
            htmlType="button"
            loading={false}
            onClick={[Function]}
            type="primary"
          >
            <Wave>
              <button
                className="ant-btn ant-btn-primary"
                disabled={true}
                onClick={[Function]}
                type="button"
              >
                <LoadingIcon
                  existIcon={false}
                  loading={false}
                  prefixCls="ant-btn"
                >
                  <CSSMotion
                    motionName="ant-btn-loading-icon-motion"
                    onAppearActive={[Function]}
                    onAppearStart={[Function]}
                    onEnterActive={[Function]}
                    onEnterStart={[Function]}
                    onLeaveActive={[Function]}
                    onLeaveStart={[Function]}
                    removeOnLeave={true}
                    visible={false}
                  >
                    <DomWrapper />
                  </CSSMotion>
                </LoadingIcon>
                <span
                  key=".0"
                >
                  Update
                </span>
              </button>
            </Wave>
          </Button>
          <Animate
            animation={Object {}}
            component=""
            componentProps={Object {}}
            onAppear={[Function]}
            onEnd={[Function]}
            onEnter={[Function]}
            onLeave={[Function]}
            showProp="data-show"
            transitionAppear={true}
            transitionEnter={true}
            transitionLeave={true}
            transitionName="ant-badge-zoom"
          />
        </span>
      </Badge>
      <Button
        block={false}
        danger={true}
        disabled={true}
        ghost={false}
        htmlType="button"
        loading={false}
        onClick={[Function]}
        type="primary"
      >
        <Wave>
          <button
            className="ant-btn ant-btn-primary ant-btn-dangerous"
            disabled={true}
            onClick={[Function]}
            type="button"
          >
            <LoadingIcon
              existIcon={false}
              loading={false}
              prefixCls="ant-btn"
            >
              <CSSMotion
                motionName="ant-btn-loading-icon-motion"
                onAppearActive={[Function]}
                onAppearStart={[Function]}
                onEnterActive={[Function]}
                onEnterStart={[Function]}
                onLeaveActive={[Function]}
                onLeaveStart={[Function]}
                removeOnLeave={true}
                visible={false}
              >
                <DomWrapper />
              </CSSMotion>
            </LoadingIcon>
            <span
              key=".0"
            >
              Delete stop sequence
            </span>
          </button>
        </Wave>
      </Button>
    </div>
  </Col>
</NavBar>
`;
