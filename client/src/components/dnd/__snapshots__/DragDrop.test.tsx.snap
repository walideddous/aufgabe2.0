// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DragDrop component match snapshot with the DrapDrop component 1`] = `
<Memo(DragDrop)
  handleAddStopsOnCLick={[MockFunction]}
  handleDragEnd={[MockFunction]}
  onDelete={[MockFunction]}
  onclick={[MockFunction]}
  selected={Array []}
  stateDND={
    Object {
      "trajekt": Object {
        "items": Array [],
        "title": "Stop sequence",
      },
      "vorschlag": Object {
        "items": Array [],
        "title": "Suggestion",
      },
    }
  }
>
  <DragDropContext
    onDragEnd={[MockFunction]}
  >
    <ErrorBoundary>
      <App
        contextId="0"
        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
        onDragEnd={[MockFunction]}
        setCallbacks={[Function]}
      >
        <Provider
          context={
            Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": Object {
                "$$typeof": Symbol(react.provider),
                "_context": [Circular],
              },
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            }
          }
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <Col
            xs={24}
          >
            <div
              className="ant-col ant-col-xs-24"
              style={Object {}}
            >
              <Card
                bordered={true}
                title="Suggestion"
              >
                <div
                  className="ant-card ant-card-bordered"
                >
                  <div
                    className="ant-card-head"
                    style={Object {}}
                  >
                    <div
                      className="ant-card-head-wrapper"
                    >
                      <div
                        className="ant-card-head-title"
                      >
                        Suggestion
                      </div>
                    </div>
                  </div>
                  <div
                    className="ant-card-body"
                    style={Object {}}
                  >
                    <ConnectFunction
                      direction="vertical"
                      droppableId="vorschlag"
                      getContainerForClone={[Function]}
                      ignoreContainerClipping={false}
                      isCombineEnabled={false}
                      isDropDisabled={false}
                      mode="standard"
                      renderClone={null}
                      type="DEFAULT"
                    >
                      <Droppable
                        direction="vertical"
                        droppableId="vorschlag"
                        getContainerForClone={[Function]}
                        ignoreContainerClipping={false}
                        isCombineEnabled={false}
                        isDropDisabled={false}
                        mode="standard"
                        placeholder={null}
                        renderClone={null}
                        shouldAnimatePlaceholder={false}
                        snapshot={
                          Object {
                            "draggingFromThisWith": null,
                            "draggingOverWith": null,
                            "isDraggingOver": false,
                            "isUsingPlaceholder": false,
                          }
                        }
                        type="DEFAULT"
                        updateViewportMaxScroll={[Function]}
                        useClone={null}
                      >
                        <div
                          style={
                            Object {
                              "display": "flex",
                            }
                          }
                        >
                          <Col
                            lg={12}
                            xs={24}
                          >
                            <div
                              className="ant-col ant-col-xs-24 ant-col-lg-12"
                              style={Object {}}
                            >
                              <div
                                className="droppable-col"
                                data-rbd-droppable-context-id="0"
                                data-rbd-droppable-id="vorschlag"
                              >
                                <AnimateInOut
                                  on={null}
                                  shouldAnimate={false}
                                />
                              </div>
                            </div>
                          </Col>
                          <Col
                            lg={12}
                          >
                            <div
                              className="ant-col ant-col-lg-12"
                              style={Object {}}
                            >
                              <div
                                className="droppable-col"
                                data-rbd-droppable-context-id="0"
                                data-rbd-droppable-id="vorschlag"
                              >
                                <AnimateInOut
                                  on={null}
                                  shouldAnimate={false}
                                />
                              </div>
                            </div>
                          </Col>
                        </div>
                      </Droppable>
                    </ConnectFunction>
                  </div>
                </div>
              </Card>
            </div>
          </Col>
          <Col
            xs={24}
          >
            <div
              className="ant-col ant-col-xs-24"
              style={Object {}}
            >
              <Card
                bordered={true}
                title="Stop sequence"
              >
                <div
                  className="ant-card ant-card-bordered"
                >
                  <div
                    className="ant-card-head"
                    style={Object {}}
                  >
                    <div
                      className="ant-card-head-wrapper"
                    >
                      <div
                        className="ant-card-head-title"
                      >
                        Stop sequence
                      </div>
                    </div>
                  </div>
                  <div
                    className="ant-card-body"
                    style={Object {}}
                  >
                    <div
                      style={
                        Object {
                          "height": "370px",
                          "overflowY": "auto",
                        }
                      }
                    >
                      <ConnectFunction
                        direction="vertical"
                        droppableId="trajekt"
                        getContainerForClone={[Function]}
                        ignoreContainerClipping={false}
                        isCombineEnabled={false}
                        isDropDisabled={false}
                        mode="standard"
                        renderClone={null}
                        type="DEFAULT"
                      >
                        <Droppable
                          direction="vertical"
                          droppableId="trajekt"
                          getContainerForClone={[Function]}
                          ignoreContainerClipping={false}
                          isCombineEnabled={false}
                          isDropDisabled={false}
                          mode="standard"
                          placeholder={null}
                          renderClone={null}
                          shouldAnimatePlaceholder={false}
                          snapshot={
                            Object {
                              "draggingFromThisWith": null,
                              "draggingOverWith": null,
                              "isDraggingOver": false,
                              "isUsingPlaceholder": false,
                            }
                          }
                          type="DEFAULT"
                          updateViewportMaxScroll={[Function]}
                          useClone={null}
                        >
                          <div
                            className="droppable-col"
                            data-rbd-droppable-context-id="0"
                            data-rbd-droppable-id="trajekt"
                          >
                            <AnimateInOut
                              on={null}
                              shouldAnimate={false}
                            />
                          </div>
                        </Droppable>
                      </ConnectFunction>
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          </Col>
        </Provider>
      </App>
    </ErrorBoundary>
  </DragDropContext>
</Memo(DragDrop)>
`;
